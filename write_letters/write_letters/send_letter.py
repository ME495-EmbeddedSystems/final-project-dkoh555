"""
Test node for sending all waypoints of a set of the letters to the robot.

Raises
------
    RuntimeError: _description_
    
Returns
-------

"""
import rclpy
from rclpy.node import Node
from rclpy.task import Future
from rclpy.callback_groups import ReentrantCallbackGroup

# messages
from polyglotbot_interfaces.msg import CharacterPath
from rcl_interfaces.msg import ParameterDescriptor
from geometry_msgs.msg import Point

# services
from polyglotbot_interfaces.srv import Write


class SendLetter(Node):
    def __init__(self):
        super().__init__("send_letter")
        self.cb_group = ReentrantCallbackGroup()

        self.declare_parameter(
            "letter_set", 0, ParameterDescriptor(description="Which letter set to send")
        )

        self.letter_set = (
            self.get_parameter("letter_set").get_parameter_value().integer_value
        )

        self.client_write = self.create_client(
            Write, "write", callback_group=self.cb_group
        )

        if not self.client_write.wait_for_service(timeout_sec=2.0):
            raise RuntimeError("Write service not available")

        ##### H #####
        self.H = [
            [0.60453125, 0.0],
            [0.578125, 0.0],
            [0.578125, 0.3525],
            [0.1240625, 0.3525],
            [0.1240625, 0.0],
            [0.09765625, 0.0],
            [0.09765625, 0.7109375],
            [0.1240625, 0.7109375],
            [0.1240625, 0.37890625],
            [0.578125, 0.37890625],
            [0.578125, 0.7109375],
            [0.60453125, 0.7109375],
            [0.60453125, 0.0],
        ]
        ##### E #####
        self.E = [
            [1.48046875, 0.3525],
            [1.1240625, 0.3525],
            [1.1240625, 0.02640625],
            [1.5303125, 0.02640625],
            [1.5303125, 0.0],
            [1.09765625, 0.0],
            [1.09765625, 0.7109375],
            [1.5303125, 0.7109375],
            [1.5303125, 0.68453125],
            [1.1240625, 0.68453125],
            [1.1240625, 0.37890625],
            [1.48046875, 0.37890625],
            [1.48046875, 0.3525],
        ]
        ##### L #####
        self.L = [
            [2.12453125, 0.02640625],
            [2.48921875, 0.02640625],
            [2.48921875, 0.0],
            [2.09765625, 0.0],
            [2.09765625, 0.7109375],
            [2.12453125, 0.7109375],
            [2.12453125, 0.02640625],
        ]
        # ##### L #####
        # self.L2 = [
        #     [3.12453125, 0.02640625],
        #     [3.48921875, 0.02640625],
        #     [3.48921875, 0.0],
        #     [3.09765625, 0.0],
        #     [3.09765625, 0.7109375],
        #     [3.12453125, 0.7109375],
        #     [3.12453125, 0.02640625],
        # ]
        ##### O #####
        self.O = [
            [4.60109375, 0.3021875],
            [4.60109375, 0.21],
            [4.568125, 0.13890625],
            [4.53515625, 0.0678125],
            [4.4740625, 0.02890625],
            [4.413125, -0.00984375],
            [4.3334375, -0.00984375],
            [4.2134375, -0.00984375],
            [4.13921875, 0.075625],
            [4.065, 0.16109375],
            [4.065, 0.30609375],
            [4.065, 0.40875],
            [4.065, 0.50046875],
            [4.09796875, 0.57171875],
            [4.1309375, 0.643125],
            [4.1921875, 0.681875],
            [4.2534375, 0.72078125],
            [4.3325, 0.72078125],
            [4.4121875, 0.72078125],
            [4.4734375, 0.681875],
            [4.5346875, 0.643125],
            [4.5678125, 0.5715625],
            [4.60109375, 0.5],
            [4.60109375, 0.40875],
            [4.60109375, 0.3021875],
            [4.5746875, 0.4096875],
            [4.5746875, 0.53859375],
            [4.50921875, 0.61640625],
            [4.44390625, 0.694375],
            [4.3325, 0.694375],
            [4.22265625, 0.694375],
            [4.1571875, 0.616875],
            [4.091875, 0.53953125],
            [4.091875, 0.40625],
            [4.091875, 0.3021875],
            [4.091875, 0.21734375],
            [4.12140625, 0.15203125],
            [4.1509375, 0.086875],
            [4.205625, 0.05171875],
            [4.2603125, 0.0165625],
            [4.3334375, 0.0165625],
            [4.44484375, 0.0165625],
            [4.5096875, 0.09421875],
            [4.5746875, 0.171875],
            [4.5746875, 0.30609375],
            [4.5746875, 0.4096875],
        ]

        self.M = [
            [0.48, 0.825],
            [0.51, 0.8190625],
            [0.49203125, 0.7390625],
            [0.4675, 0.66296875],
            [0.44296875, 0.58703125],
            [0.4125, 0.52046875],
            [0.38203125, 0.4540625],
            [0.345, 0.40203125],
            [0.34296875, 0.4040625],
            [0.3384375, 0.4075],
            [0.3340625, 0.4109375],
            [0.3290625, 0.414375],
            [0.3240625, 0.41796875],
            [0.32, 0.42],
            [0.35703125, 0.47],
            [0.38703125, 0.535],
            [0.41703125, 0.6],
            [0.44046875, 0.67390625],
            [0.4640625, 0.74796875],
            [0.48, 0.825],
            [0.4740625, 0.42203125],
            [0.5040625, 0.4159375],
            [0.48703125, 0.34796875],
            [0.4625, 0.284375],
            [0.43796875, 0.2209375],
            [0.40890625, 0.1659375],
            [0.38, 0.1109375],
            [0.34703125, 0.06796875],
            [0.3440625, 0.07],
            [0.3390625, 0.0734375],
            [0.3340625, 0.07703125],
            [0.3290625, 0.08],
            [0.3240625, 0.08296875],
            [0.32, 0.085],
            [0.3709375, 0.14796875],
            [0.41, 0.23640625],
            [0.4490625, 0.325],
            [0.4740625, 0.42203125],
            [0.4390625, 0.6240625],
            [0.9290625, 0.6240625],
            [0.9290625, 0.595],
            [0.42703125, 0.595],
            [0.4390625, 0.6240625],
            [0.635, 0.6159375],
            [0.665, 0.6159375],
            [0.665, -0.02203125],
            [0.665, -0.04203125],
            [0.6584375, -0.05140625],
            [0.65203125, -0.0609375],
            [0.63796875, -0.065],
            [0.6240625, -0.0690625],
            [0.595, -0.07],
            [0.5659375, -0.0709375],
            [0.5209375, -0.0709375],
            [0.5190625, -0.065],
            [0.51546875, -0.0559375],
            [0.51203125, -0.04703125],
            [0.50796875, -0.04],
            [0.54796875, -0.0409375],
            [0.5784375, -0.0409375],
            [0.6090625, -0.0409375],
            [0.6190625, -0.04],
            [0.62796875, -0.04],
            [0.63140625, -0.03640625],
            [0.635, -0.03296875],
            [0.635, -0.02296875],
            [0.635, 0.6159375],
            [0.7740625, 0.41796875],
            [0.8009375, 0.4259375],
            [0.83296875, 0.37203125],
            [0.8609375, 0.31],
            [0.8890625, 0.24796875],
            [0.91046875, 0.18796875],
            [0.93203125, 0.12796875],
            [0.94203125, 0.0809375],
            [0.9140625, 0.07203125],
            [0.9040625, 0.1190625],
            [0.8825, 0.1790625],
            [0.8609375, 0.2390625],
            [0.83296875, 0.3015625],
            [0.805, 0.3640625],
            [0.7740625, 0.41796875],
            [0.91703125, 0.6240625],
            [0.92203125, 0.6240625],
            [0.9290625, 0.6259375],
            [0.94796875, 0.6190625],
            [0.93703125, 0.57],
            [0.925, 0.51546875],
            [0.91296875, 0.4609375],
            [0.90296875, 0.425],
            [0.87703125, 0.4309375],
            [0.88296875, 0.455],
            [0.89, 0.48640625],
            [0.89703125, 0.51796875],
            [0.90390625, 0.5525],
            [0.9109375, 0.58703125],
            [0.91703125, 0.61796875],
            [0.91703125, 0.6240625],
            [0.2909375, 0.82703125],
            [0.32, 0.8190625],
            [0.28703125, 0.735],
            [0.24296875, 0.655],
            [0.1990625, 0.575],
            [0.1484375, 0.50546875],
            [0.09796875, 0.4359375],
            [0.0440625, 0.3809375],
            [0.04203125, 0.3840625],
            [0.0384375, 0.3884375],
            [0.035, 0.39296875],
            [0.0309375, 0.39796875],
            [0.02703125, 0.40296875],
            [0.02296875, 0.405],
            [0.07703125, 0.45703125],
            [0.12640625, 0.52453125],
            [0.1759375, 0.59203125],
            [0.2184375, 0.66953125],
            [0.2609375, 0.74703125],
            [0.2909375, 0.82703125],
            [0.18, 0.58796875],
            [0.20703125, 0.6159375],
            [0.2090625, 0.615],
            [0.2090625, -0.06796875],
            [0.18, -0.06796875],
            [0.18, 0.58796875],
        ]

        self.N = [
            [0.3759375, 0.6190625],
            [0.38203125, 0.6190625],
            [0.38703125, 0.6209375],
            [0.40703125, 0.615],
            [0.39, 0.42296875],
            [0.34203125, 0.2884375],
            [0.2940625, 0.1540625],
            [0.2215625, 0.0675],
            [0.1490625, -0.0190625],
            [0.05703125, -0.06796875],
            [0.055, -0.0640625],
            [0.05140625, -0.06],
            [0.04796875, -0.0559375],
            [0.0434375, -0.05140625],
            [0.0390625, -0.04703125],
            [0.035, -0.0440625],
            [0.1240625, 0.0],
            [0.19453125, 0.08390625],
            [0.265, 0.16796875],
            [0.31203125, 0.29796875],
            [0.3590625, 0.42796875],
            [0.3759375, 0.61],
            [0.3759375, 0.6190625],
            [0.4759375, 0.7440625],
            [0.87703125, 0.7440625],
            [0.87703125, 0.715],
            [0.4759375, 0.715],
            [0.4759375, 0.7440625],
            [0.4259375, 0.39296875],
            [0.9509375, 0.39296875],
            [0.9509375, 0.3640625],
            [0.4259375, 0.3640625],
            [0.4259375, 0.39296875],
            [0.67796875, 0.5290625],
            [0.70796875, 0.5290625],
            [0.70796875, -0.0209375],
            [0.70796875, -0.0409375],
            [0.70046875, -0.0509375],
            [0.69296875, -0.0609375],
            [0.6759375, -0.065],
            [0.66, -0.0690625],
            [0.62796875, -0.07],
            [0.5959375, -0.0709375],
            [0.53703125, -0.07],
            [0.535, -0.065],
            [0.53046875, -0.05703125],
            [0.5259375, -0.0490625],
            [0.52296875, -0.04203125],
            [0.55703125, -0.04203125],
            [0.58453125, -0.0425],
            [0.61203125, -0.04296875],
            [0.6309375, -0.0425],
            [0.65, -0.04203125],
            [0.65796875, -0.04203125],
            [0.6690625, -0.0409375],
            [0.6734375, -0.03640625],
            [0.67796875, -0.03203125],
            [0.67796875, -0.02203125],
            [0.67796875, 0.5290625],
            [0.86796875, 0.7440625],
            [0.875, 0.7440625],
            [0.88203125, 0.74703125],
            [0.9059375, 0.7309375],
            [0.88, 0.6909375],
            [0.845, 0.65046875],
            [0.81, 0.61],
            [0.7725, 0.5734375],
            [0.735, 0.53703125],
            [0.7009375, 0.5090625],
            [0.69703125, 0.5140625],
            [0.69046875, 0.51953125],
            [0.6840625, 0.525],
            [0.67796875, 0.5290625],
            [0.71203125, 0.555],
            [0.7475, 0.59046875],
            [0.78296875, 0.6259375],
            [0.815, 0.66390625],
            [0.84703125, 0.70203125],
            [0.86796875, 0.7359375],
            [0.86796875, 0.7440625],
            [0.0490625, 0.6190625],
            [0.38703125, 0.6190625],
            [0.38703125, 0.5890625],
            [0.0490625, 0.5890625],
            [0.0490625, 0.6190625],
            [0.0840625, 0.28],
            [0.1059375, 0.3009375],
            [0.15203125, 0.275],
            [0.1975, 0.24453125],
            [0.24296875, 0.2140625],
            [0.285, 0.1809375],
            [0.32703125, 0.14796875],
            [0.36046875, 0.11640625],
            [0.3940625, 0.085],
            [0.4159375, 0.05703125],
            [0.39203125, 0.03296875],
            [0.37, 0.0609375],
            [0.33640625, 0.0934375],
            [0.30296875, 0.1259375],
            [0.26140625, 0.15890625],
            [0.22, 0.19203125],
            [0.17453125, 0.2234375],
            [0.1290625, 0.255],
            [0.0840625, 0.28],
            [0.0840625, 0.28],
            [0.1009375, 0.3309375],
            [0.119375, 0.39890625],
            [0.13796875, 0.46703125],
            [0.155, 0.54296875],
            [0.17203125, 0.6190625],
            [0.1859375, 0.6934375],
            [0.2, 0.76796875],
            [0.2090625, 0.83203125],
            [0.23796875, 0.83],
            [0.2290625, 0.7640625],
            [0.21453125, 0.6884375],
            [0.2, 0.61296875],
            [0.1825, 0.536875],
            [0.165, 0.4609375],
            [0.14703125, 0.3925],
            [0.1290625, 0.3240625],
            [0.11296875, 0.27296875],
            [0.0840625, 0.28],
        ]

        if self.letter_set == 0:
            self.__send_letters_0()
        elif self.letter_set == 1:
            self.__send_letter_1()

    def __send_letters_0(self):
        request = Write.Request()
        characters = []

        ############## H ##############
        H_x = [H_coor[0] for H_coor in self.H]
        H_y = [H_coor[1] for H_coor in self.H]

        H_x_min = min(H_x)
        H_y_min = min(H_y)

        char_H = CharacterPath()
        points_H = []

        for i in range(len(self.H)):
            x = self.H[i][0] - H_x_min
            y = self.H[i][1] - H_y_min

            points_H.append(Point(x=x, y=y))

        char_H.points = points_H
        characters.append(char_H)

        ############## E ##############
        E_x = [E_coor[0] for E_coor in self.E]
        E_y = [E_coor[1] for E_coor in self.E]

        E_x_min = min(E_x)
        E_y_min = min(E_y)

        char_E = CharacterPath()
        points_E = []

        for i in range(len(self.E)):
            x = self.E[i][0] - E_x_min
            y = self.E[i][1] - E_y_min

            points_E.append(Point(x=x, y=y))

        char_E.points = points_E
        characters.append(char_E)

        ############## L ##############
        L_x = [L_coor[0] for L_coor in self.L]
        L_y = [L_coor[1] for L_coor in self.L]

        L_x_min = min(L_x)
        L_y_min = min(L_y)

        char_L = CharacterPath()
        points_L = []

        for i in range(len(self.L)):
            x = self.L[i][0] - L_x_min
            y = self.L[i][1] - L_y_min

            points_L.append(Point(x=x, y=y))

        char_L.points = points_L
        characters.append(char_L)
        characters.append(char_L)

        # ############## L ##############
        # char_L2 = CharacterPath()
        # points_L2 = []

        # for i in range(len(self.L2)):
        #     x = self.L2[i][0]
        #     y = self.L2[i][1]

        #     points_L2.append(Point(x=x, y=y))

        # char_L2.points = points_L2
        # characters.append(char_L2)

        ############## O ##############
        O_x = [O_coor[0] for O_coor in self.O]
        O_y = [O_coor[1] for O_coor in self.O]

        O_x_min = min(O_x)
        O_y_min = min(O_y)

        char_O = CharacterPath()
        points_O = []

        for i in range(len(self.O)):
            x = self.O[i][0] - O_x_min
            y = self.O[i][1] - O_y_min

            points_O.append(Point(x=x, y=y))

        char_O.points = points_O
        characters.append(char_O)

        request.characters = characters
        future = self.client_write.call_async(request=request)

        rclpy.spin_until_future_complete(self, future)
        self.get_logger().info(f"{future.result()}")

    def __send_letter_1(self):
        request = Write.Request()
        characters = []

        ############ FIRST ############
        M_x = [M_coor[0] for M_coor in self.M]
        M_y = [M_coor[1] for M_coor in self.M]

        M_x_min = min(M_x)
        M_y_min = min(M_y)

        char_M = CharacterPath()
        points_M = []

        for i in range(len(self.M)):
            x = self.M[i][0] - M_x_min
            y = self.M[i][1] - M_y_min

            points_M.append(Point(x=x, y=y))

        char_M.points = points_M
        characters.append(char_M)

        ############ SECOND ############
        N_x = [N_coor[0] for N_coor in self.N]
        N_y = [N_coor[1] for N_coor in self.N]

        N_x_min = min(N_x)
        N_y_min = min(N_y)

        char_N = CharacterPath()
        points_N = []

        for i in range(len(self.N)):
            x = self.N[i][0] - N_x_min
            y = self.N[i][1] - N_y_min

            points_N.append(Point(x=x, y=y))

        char_N.points = points_N

        request.characters = characters
        future = self.client_write.call_async(request=request)
        self.get_logger().info("calling write service ...")
        rclpy.spin_until_future_complete(self, future)
        self.get_logger().info(f"{future.result()}")

    # def write_future_callback(self, future_write: Future):


def main(args=None):
    rclpy.init(args=args)
    node_send_letter = SendLetter()

    node_send_letter.destroy_node()
    rclpy.shutdown()
